<?xml version="1.0" encoding="UTF-8"?>
<SunopsisExport>
<Admin RepositoryVersion="05.02.02.08" IsLegacyIdCompatible="false" />
<Encryption algorithm="AES" keyLength="128" exportKeyHash="" keyVect="3aUzQ58hcfCPgDDdWuw2Rw==" exportKeySalt="e8271d9f-4fae-4ed7-b1f2-482585a8a664" containsCipherText="false"/>
<Object class="com.sunopsis.dwg.dbobj.SnpKmTemplate">
		<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2018-08-31 12:38:45.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[SUNOPSIS_INSTALL]]></Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[bc17c799-d8eb-4fe2-9440-a78c825b817b]]></Field>
	<Field name="IndChange" type="java.lang.String"><![CDATA[I]]></Field>
	<Field name="IndIsSeeded" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="IndLangTrans" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="IndReplNl" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[1]]></Field>
	<Field name="IKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[227]]></Field>
	<Field name="LangName" type="java.lang.String"><![CDATA[PYTHON]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2018-08-31 12:38:45.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[SUNOPSIS_INSTALL]]></Field>
	<Field name="Name" type="java.lang.String"><![CDATA[SparkPythonRESTSubmit]]></Field>
	<Field name="TechnoName" type="java.lang.String"><![CDATA[SPARK_PYTHON]]></Field>
	<Field name="TemplateText" type="java.lang.String"><![CDATA[


import java.io.*;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.cert.X509Certificate;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Base64;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Iterator;
import java.util.logging.Logger;
import java.util.Map;
import java.net.URLConnection;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import org.codehaus.jackson.*;
import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.ObjectMapper;

import oracle.odi.km.exception.OdiKMException;

/***************************************/
/***************************************/

class HttpsTrustManager implements X509TrustManager {
    private static TrustManager[] trustManagers;
    //private static final X509Certificate[] _AcceptedIssuers = new X509Certificate[]{};
    private static final X509Certificate[] _AcceptedIssuers = [] as X509Certificate[];

    @Override
    public void checkClientTrusted(
            X509Certificate[] x509Certificates, String s)
            throws java.security.cert.CertificateException {

    }

    @Override
    public void checkServerTrusted(
            X509Certificate[] x509Certificates, String s)
            throws java.security.cert.CertificateException {

    }

    public boolean isClientTrusted(X509Certificate[] chain) {
        return true;
    }

    public boolean isServerTrusted(X509Certificate[] chain) {
        return true;
    }

    @Override
    public X509Certificate[] getAcceptedIssuers() {
        return _AcceptedIssuers;
    }

    public static void allowAllSSL(HttpsURLConnection con) {

        con.setHostnameVerifier(new HostnameVerifier() {

            @Override
            public boolean verify(String arg0, SSLSession arg1) {
                return true;
            }

        });

        SSLContext context = null;
        if (trustManagers == null) {
            trustManagers = [];
            HttpsTrustManager pp = new HttpsTrustManager();
            trustManagers = [pp];
        }

        try {
            context = SSLContext.getInstance("TLS");
            context.init(null, trustManagers, new SecureRandom());
        } catch (NoSuchAlgorithmException | KeyManagementException e) {
            e.printStackTrace();
        }

        con.setSSLSocketFactory(context != null ? context.getSocketFactory() : null);
    }
}

/***************************************/
/***************************************/

public class RestfulClient {

    private static final Logger logger = Logger.getLogger(RestfulClient.class.getName());

    private String restfulUrl;
    private Map<String, String> headers = new HashMap<String, String>();

    JsonNode jn;
    public JsonNode getJn() { return this.jn; }

    public void setURL(String restfulUrl) {
        this.restfulUrl = restfulUrl;
    }

    public RestfulClient addHeader(String key, String value) {
        headers.put(key, value);
        return this;
    }

    public RestfulClient removeHeaderKey(String key) {
        headers.remove(key);
        return this;
    }

    public RestfulClient addAuthenticationInformation(String userName, String password) {
        String authString = String.format("%s:%s", userName, password);
        byte[] encodedAuthInfo = Base64.getEncoder().encode(
                authString.getBytes());
        String authStringEnc = new String(encodedAuthInfo);

        String authHeader = String.format("Basic %s", authStringEnc);
        return addHeader("Authorization", authHeader);
    }

    private String constructUrl(String pUrlPath, String pMethodPath,
                                Map<String, String> pQueryParams) {
        String urlS = String.format("%s%s", pUrlPath, pMethodPath);
        StringBuilder sb = new StringBuilder();
        if (pQueryParams != null && !pQueryParams.isEmpty()) {
            for (Iterator<String> it = pQueryParams.keySet().iterator(); it
                    .hasNext();) {
                String key = it.next();
                String value = pQueryParams.get(key);
                sb.append(key);
                sb.append("=");
                sb.append(value);
                if (it.hasNext()) {
                    sb.append("&");
                }
            }
        }
        if (sb.length() > 0) {
            urlS = String.format("%s?%s", urlS, sb.toString());
        }

        return urlS;
    }

    private void setHeaders(HttpURLConnection conn) {
        for (Map.Entry<String, String> entry : headers.entrySet()) {
            conn.setRequestProperty(entry.getKey(), entry.getValue());
        }
    }

//    public String inputToString(InputStream inStream) {
//        if (inStream == null) {
//            return null;
//        }
//        try(java.util.Scanner s = new java.util.Scanner(inStream)) {
//            return s.useDelimiter("\\A").hasNext() ? s.next() : ""; }
//    }

    private JsonNode parseJsonStream(InputStream inStream) throws Exception {
        BufferedReader br   = new BufferedReader(new InputStreamReader(inStream));
        ObjectMapper mapper = new ObjectMapper();
        JsonNode jsonNode   = mapper.readTree(br);

        return jsonNode;
    }


    @SuppressWarnings("restriction")
    public Integer post(String payload) throws RestfulException {
        Integer resultCode = -1;
        HttpsURLConnection conn = null;
        try {
            URL url = new URL(null, restfulUrl,new sun.net.www.protocol.https.Handler());
            conn = (HttpsURLConnection) url.openConnection();
            conn.setRequestMethod("POST");

            setHeaders(conn);
            conn.setDoOutput(true);
            HttpsTrustManager.allowAllSSL(conn);
            byte[] outputInBytes = payload.getBytes("UTF-8");
            OutputStream os = conn.getOutputStream();
            os.write(outputInBytes);
            
            if (conn.getResponseCode() != HttpURLConnection.HTTP_OK) {
                throw new RestfulException(String.format(
                        "Failed : HTTP error code : %s - %s",
                        conn.getResponseCode(), conn.getResponseMessage()));
            }

            jn = parseJsonStream(conn.getInputStream());
            resultCode = conn.getResponseCode();

        } catch (Exception e) {
            throw new RestfulException(e);
        } finally {
            if (conn != null) {
                conn.disconnect();
            }
        }
        return resultCode;
    }

    @SuppressWarnings("restriction")
    public Integer  get(String pMethodPath) throws RestfulException {
        Integer resultCode = -1;
        String urlS = constructUrl(restfulUrl, pMethodPath, null);

        HttpsURLConnection conn = null;
        try {
            URL url = new URL(null, urlS,new sun.net.www.protocol.https.Handler());
            conn = (HttpsURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            setHeaders(conn);
            HttpsTrustManager.allowAllSSL(conn);

            if (conn.getResponseCode() != HttpURLConnection.HTTP_OK) {
                throw new RestfulException(String.format(
                        "Failed : HTTP error code : %s - %s",
                        conn.getResponseCode(), conn.getResponseMessage()));
            }

            jn = parseJsonStream(conn.getInputStream());
            resultCode = conn.getResponseCode();

        } catch (Exception e) {
            throw new RestfulException(e);
        } finally {
            if (conn != null) {
                conn.disconnect();
            }
        }
        return resultCode;
    }
}

/***************************************/
/***************************************/

public class RestfulException extends Exception {

    public RestfulException(Exception e) {
        super(e);
    }

    public RestfulException(String msg, Exception e) {
        super(msg, e);
    }

    public RestfulException(String msg) {
        super(msg);
    }
}

/***************************************/
/***************************************/

public class Spark_Submit {


    public int Spark_REST_Submit(String restfulIPAddress,
                        String identityDomain,
                        String serviceInstance,
                        String userName,
                        String password,
                        String appName,
                        String description,
                        String sparkJobType,
                        String sparkSessionType,
                        String driverCores,
                        String executorCores,
                        String numExecutors,
                        String driverMemory,
                        String executorMemory,
                        String applicationFile,
                        String applicationPyFiles,
                        String applicationJarFiles,
                        String queue) throws Exception {

        int retCode = 0;
        String jobString;
        String restfullUrl;

        jobString = "{\"job\":{\"applicationName\":\"" + appName +
                "\",\"description\":\"" + description +
                "\",\"sparkJobType\":\"" + sparkJobType +
                "\",\"sparkSessionType\":\"" + sparkSessionType +
                "\",\"driverCores\":\"" + driverCores +
                "\",\"executorCores\":\"" + executorCores +
                "\",\"numExecutors\":\"" + numExecutors +
                "\",\"driverMemory\":\"" + driverMemory +
                "\",\"executorMemory\":\"" + executorMemory +
                "\",\"applicationFile\":\"" + applicationFile +
                "\",\"applicationPyFiles\":\"" + applicationPyFiles +
                "\",\"applicationJarFiles\":\"" + applicationJarFiles +
                "\",\"queue\":\"" + queue +
                "\"}}";

        restfullUrl = restfulIPAddress + "/bdcsce/api/v1.1/clustermgmt/" + identityDomain + "/instances/" + serviceInstance + "/jobs";
        //System.out.println("=============================================");
        //System.out.println(restfullUrl);
        //System.out.println(jobString);
        RestfulClient rc = new RestfulClient();
        rc.setURL(restfullUrl);
        rc.addAuthenticationInformation(userName, password);
        rc.addHeader("Content-Type", "application/json");
        int retValue = rc.post(jobString);
        //System.out.println("POST response code : " + retValue);

        JsonNode jn = rc.getJn();
        resetRetJSONValue();
        parseJSON(jn, "href");

        //System.out.println("=============================================");
        //System.out.println("Job Monitoring URL : " + retJSONValue + "/status");
        rc.setURL(retJSONValue);
        rc.removeHeaderKey("Content-Type");
        rc.addHeader("accept", "application/json");

        retValue = rc.get("/status");
        jn = rc.getJn();

        resetRetJSONValue();
        parseJSON(jn, "progress");
        while ((retValue == 200) && continueMonitoring()) {
            retValue = rc.get("/status");
            jn = rc.getJn();
            resetRetJSONValue();
            parseJSON(jn, "progress");
            Thread.sleep(3000);
        }


        if (!retJSONValue.equals("succeeded")) {
            retCode = -1;
        }
        return retCode;
    }

    int loopCount = 0;

    private boolean continueMonitoring() {
        boolean retValue = true;
        loopCount++;

        //System.out.println("Current Job Status [" + loopCount + "] : " + retJSONValue);
        if (loopCount > 100) {
            retValue = false;
        }
        // Allowed Values: [ "aborted", "aborting", "accepted", "failed", "paused", "pending", "processing", "succeeded", "undefined" ]
        if (retJSONValue.equals("aborted")
                || retJSONValue.equals("failed")
                || retJSONValue.equals("succeeded")
                || retJSONValue.equals("undefined")
                ) {
            retValue = false;
        }
        return retValue;
    }

    private String retJSONValue = null;

    private void resetRetJSONValue() {retJSONValue = null; }

    private void parseJSON(JsonNode node, String searchToken) {
        //String resultStr = null;
        Iterator<String> fieldNames = node.getFieldNames();
        while (retJSONValue == null & fieldNames.hasNext()) {
            String fieldName = fieldNames.next();
            JsonNode fieldValue = node.get(fieldName);

            if (fieldName.equals(searchToken)) {
                //System.out.println("FOUND IT - " + fieldValue);
                retJSONValue = fieldValue.toString();
                // Strip the leading/trailing double quotes
                String aLetter = Character.toString(retJSONValue.charAt(0));
                if (aLetter.equals("\""))
                    retJSONValue = retJSONValue.substring(1, retJSONValue.length() - 1);
            }
            if (fieldValue.isObject()) {
                parseJSON(fieldValue, searchToken);
            } else {
                //String value = fieldValue.asText();
                if (fieldValue.isArray()) {
                    Integer numArray = fieldValue.size();
                    if (numArray > 0) {
                        for (Integer loop = 0; loop < numArray; loop++) {
                            // Depending on the class type of the array element, recursively call in ...
                            if (fieldValue.get(loop).isObject()) {
                                JsonNode tNode = fieldValue.get(loop);
                                parseJSON(tNode, searchToken);
                            } else if (fieldValue.get(loop).isTextual()) {
                                // This is a text object - "field":"value"
                                //System.out.println(fieldValue.get(loop).toString());
                            }
                        }
                    }
                }

                //System.out.println(fieldName + " : " + value);
            }
        }
    }

}

/***************************************/
/***************************************/

    Spark_Submit mySubmit = new Spark_Submit();
    int retValue = 0;

    retValue = mySubmit.Spark_REST_Submit( "$[restIPAddress]"
        ,"$[restIdentityDomain]"
        ,"$[restServiceInstance]"
        ,"$[restUserName]"
        ,"$[restPassword]"
        ,"$[restMappingName]"
        ,"$[restMappingNameLong]"
        ,"batch"
        ,"pyspark"
        ,"$[restDriverCores]"
        ,"$[restTotalExecutorCores]"
        ,"$[restNumExecutors]"
        ,"$[restDriverMemory]"
        ,"$[restExecutorMemory]"
        ,"$[restApplicationFile]"
        ,"$[restApplicationPyFile]"
        ,"$[restApplicationJarFiles]" 
        ,"api");

        if (retValue != 0) {
            throw new OdiKMException(
                    null,
                    "ODIKM-SPARK-REST-10000",
                    "ODIKM-SPARK-REST-10000: Job Didn't run.",
                    null);
        }

/***************************************/
/***************************************/

     ]]></Field>
	<Field name="TemplateVersion" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTemplateJoin">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[59700a47-8796-4040-945b-0a5a6cfae1d3]]></Field>
	<Field name="IKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[90]]></Field>
	<Field name="IKmTemplateRef" type="com.sunopsis.sql.DbInt"><![CDATA[227]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpKmTemplateJoin">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[bf536f5d-20ec-4913-8657-c66c41ae9ce5]]></Field>
	<Field name="ISnpKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[227]]></Field>
	<Field name="ISnpTrt" type="com.sunopsis.sql.DbInt"><![CDATA[159]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpKmTemplateJoin">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[ad25fbce-e0aa-40c4-88a5-5b6e6196480a]]></Field>
	<Field name="ISnpKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[227]]></Field>
	<Field name="ISnpTrt" type="com.sunopsis.sql.DbInt"><![CDATA[146]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpKmTemplateJoin">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[d283899d-ec65-43dc-85fe-c1a99cdbd12e]]></Field>
	<Field name="ISnpKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[227]]></Field>
	<Field name="ISnpTrt" type="com.sunopsis.sql.DbInt"><![CDATA[134]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpKmTemplateJoin">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[df2ba50c-dc30-48ed-a8fb-05042bd987c8]]></Field>
	<Field name="ISnpKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[227]]></Field>
	<Field name="ISnpTrt" type="com.sunopsis.sql.DbInt"><![CDATA[141]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpKmTemplateJoin">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[ae0b63bc-a66a-4dd2-a8aa-e693b8177a4f]]></Field>
	<Field name="ISnpKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[227]]></Field>
	<Field name="ISnpTrt" type="com.sunopsis.sql.DbInt"><![CDATA[143]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpKmTemplateJoin">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[2549a90a-a18a-4d26-b427-b36d34fb4d3e]]></Field>
	<Field name="ISnpKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[227]]></Field>
	<Field name="ISnpTrt" type="com.sunopsis.sql.DbInt"><![CDATA[160]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpKmTemplateJoin">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[787d95e4-f6c5-4264-9190-b9b47b71559d]]></Field>
	<Field name="ISnpKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[227]]></Field>
	<Field name="ISnpTrt" type="com.sunopsis.sql.DbInt"><![CDATA[145]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpKmTemplateJoin">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[386543e4-0d80-46d8-9b64-04f3437d69f9]]></Field>
	<Field name="ISnpKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[227]]></Field>
	<Field name="ISnpTrt" type="com.sunopsis.sql.DbInt"><![CDATA[133]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpKmTemplateJoin">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[5d6c5fe5-4227-447b-beac-fd83cb8fe6e2]]></Field>
	<Field name="ISnpKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[227]]></Field>
	<Field name="ISnpTrt" type="com.sunopsis.sql.DbInt"><![CDATA[139]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpKmTemplateJoin">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[0bc57420-d106-405b-af27-d414c9260cc2]]></Field>
	<Field name="ISnpKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[227]]></Field>
	<Field name="ISnpTrt" type="com.sunopsis.sql.DbInt"><![CDATA[136]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpKmTemplateJoin">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[b42b20b1-36ab-4b7b-92e7-cc62aef85d62]]></Field>
	<Field name="ISnpKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[227]]></Field>
	<Field name="ISnpTrt" type="com.sunopsis.sql.DbInt"><![CDATA[137]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_KMTEMPLATE.90]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[fa46e05a-2d00-11e6-93fa-00163e1ffd72]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[SparkPythonSubmit]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_KMTEMPLATE]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[17]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_KMTEMPLATE.227]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[bc17c799-d8eb-4fe2-9440-a78c825b817b]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[SparkPythonRESTSubmit]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_KMTEMPLATE]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[21]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TRT.159]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[2614CF93-4394-408B-82F5-A7F586F627AE]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[XKM Spark Table Function]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_TRT]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[24]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TRT.146]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[28C4768839C04BAEE053CCC0E40AAAF7]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[LKM Spark to Cassandra]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_TRT]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[22]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TRT.134]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[a7c7dc44-16fc-4b90-9c67-fc41cb76446d]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[LKMSparkFile]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_TRT]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[12]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TRT.141]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[c2f113d5-e22b-4237-b25c-545872875536]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[LKM Spark to Hive]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_TRT]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[17]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TRT.143]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[dabbcab5-caeb-423c-b6f2-bfb106747464]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[LKM Spark to Kafka]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_TRT]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[18]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TRT.160]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[310d86cf-27e0-48c0-ae73-82685449bcce]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[IKM Spark Table Function]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_TRT]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[24]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TRT.145]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[1FD1D82B9F005A53E053CCC0E40AC733]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[LKM Spark to SQL]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_TRT]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[16]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TRT.133]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[80aa8be2-d68d-40fe-bc1e-0b0b3ee0105e]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[LKMSpark]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_TRT]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[8]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TRT.139]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[2B7D95B0B8A32C45E053E603C40A5DCB]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[LKM Spark to HDFS]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_TRT]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[17]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TRT.136]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[1986feab-eca2-4f5a-96a8-ecf827ac7cda]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[LKM Spark to File]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_TRT]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[17]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TRT.137]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[33920E0F49656934E053E603C40A3C0A]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[LKMSparkHDFS]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_TRT]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[12]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpImportRep">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[f820ab87-5b84-46f0-89ae-665128008f4c]]></Field>
	<Field name="RepGuid" type="java.lang.String">null</Field>
	<Field name="RepShortId" type="com.sunopsis.sql.DbInt"><![CDATA[31]]></Field>
	<Field name="RepTimestamp" type="java.lang.String"><![CDATA[1538157840298]]></Field>
</Object>
<Object class="com.sunopsis.dwg.DwgExportSummary">
		<Field name="ExpTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="InstObjNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="JoinColNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="JoinNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="KeyColNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="KeyNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="LinkDiagNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="MorigTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="MtxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="OrigTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="OtherObjectsNb" type="com.sunopsis.sql.DbInt"><![CDATA[13]]></Field>
	<Field name="PlanAgentNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="StepNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="TxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="UeOrigNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="UeUsedNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="VarPlanAgentNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="ScenTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="OdiVersion" type="java.lang.String"><![CDATA[12.2.1]]></Field>
	<Field name="OriginRepositoryID" type="com.sunopsis.sql.DbInt"><![CDATA[21]]></Field>
	<Field name="RepositoryVersion" type="java.lang.String"><![CDATA[05.02.02.08]]></Field>
</Object>
</SunopsisExport>
